<?xml version="1.0" encoding="UTF-8"?>
<project
    name="opentasks-provider"
    basedir="."
    default="build" >

    <!--
         The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems.
    -->

    <property file="local.properties" />

    <!--
         The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
    -->

    <property file="ant.properties" />

    <!--
         if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir
    -->

    <property environment="env" />

    <condition
        property="sdk.dir"
        value="${env.ANDROID_HOME}" >

        <isset property="env.ANDROID_HOME" />
    </condition>

    <!--
         The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
    -->

    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->

    <fail
        message="sdk.dir is missing. Make sure to generate local.properties using &apos;android update project&apos; or to inject it through the ANDROID_HOME environment variable."
        unless="sdk.dir" />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->

    <import
        file="custom_rules.xml"
        optional="true" />

    <!--
         Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->

    <import file="${sdk.dir}/tools/ant/build.xml" />

    <property
        name="base.dir"
        value="${basedir}" />

    <property
        name="dist.dir"
        value="${basedir}/dist" />

    <property
        name="src.dir"
        value="${basedir}/src" />

    <property
        name="jar.dir"
        value="${dist.dir}/lib" />

    <!-- define Maven coordinates -->

    <property
        name="groupId"
        value="org.dmfs" />

    <property
        name="artifactId"
        value="${ant.project.name}" />

    <!-- defined maven snapshots and staging repository id and url -->

    <property
        name="ossrh-snapshots-repository-url"
        value="https://oss.sonatype.org/content/repositories/snapshots/" />

    <property
        name="ossrh-staging-repository-url"
        value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
    <!-- there server id in the Maven settings.xml -->

    <property
        name="ossrh-server-id"
        value="ossrh" />

    <path id="libraryclasspath" >

        <fileset
            dir="libs"
            includes="*.jar" />
    </path>

    <path id="classpath" >

        <pathelement location="bin/classes" />

        <path refid="libraryclasspath" />
    </path>

    <available
        file=".git"
        property="git.present"
        type="dir" />

    <target
        name="gitinfo"
        description="determine git properties"
        if="git.present" >

        <exec
            errorproperty=""
            executable="git"
            failifexecutionfails="false"
            outputproperty="git.commithash" >

            <arg value="rev-parse" />

            <arg value="HEAD" />
        </exec>

        <exec
            errorproperty=""
            executable="git"
            failifexecutionfails="false"
            outputproperty="git.repo" >

            <arg value="config" />

            <arg value="--get" />

            <arg value="remote.github.url" />
        </exec>

        <exec
            errorproperty=""
            executable="git"
            failifexecutionfails="false"
            outputproperty="git.tag" >

            <arg value="describe" />

            <arg value="--abbrev=0" />

            <arg value="--tags" />
        </exec>

        <exec
            errorproperty=""
            executable="git"
            failifexecutionfails="false"
            outputproperty="git.user.email" >

            <arg value="config" />

            <arg value="user.email" />
        </exec>

        <condition
            else="${version}"
            property="git.tag"
            value="${git.tag}" >

            <and>

                <isset property="git.tag" />

                <length
                    length="0"
                    string="${git.tag}"
                    trim="yes"
                    when="greater" />
            </and>
        </condition>

        <property
            name="jar"
            value="${jar.dir}/${artifactId}-${git.tag}.jar" />

        <property
            name="javadoc-jar"
            value="${jar.dir}/${artifactId}-${git.tag}-javadoc.jar" />

        <property
            name="sources-jar"
            value="${jar.dir}/${artifactId}-${git.tag}-sources.jar" />
    </target>
    <!-- Compile project -->

    <target name="compile" >

        <path id="project.javac.classpath" >

            <path path="${sdk.dir}/platforms/android-22/android.jar" />

            <path refid="libraryclasspath" />

            <path path="${java.compiler.classpath}" />
        </path>

        <javac
            includeantruntime="false"
            source="1.7"
            srcdir="${src.dir}"
            target="1.7" >

            <classpath refid="project.javac.classpath" />
        </javac>
    </target>

    <target
        name="jar"
        depends="compile,gitinfo" >

        <delete file="${jar.dir}/${name}.jar" />

        <buildnumber file=".build" />

        <manifest file="MANIFEST.MF" >

            <attribute
                name="Git-Release-Hash"
                value="${git.commithash}" />

            <attribute
                name="Git-Release-Tag"
                value="${git.tag}" />

            <attribute
                name="Built-By"
                value="${git.user.email}" />

            <attribute
                name="Implementation-Version"
                value="${git.tag}-${build.number}" />
        </manifest>

        <jar
            basedir="${src.dir}"
            destfile="${jar}"
            includes="**/*.class **/*.java"
            manifest="MANIFEST.MF" >

            <metainf
                dir="${basedir}"
                includes="NOTICE" />

            <metainf
                dir="${basedir}"
                includes="LICENSE" />
        </jar>
    </target>

    <target
        name="dist"
        depends="jar" >

        <!-- build the javadoc jar -->

        <javadoc
            destdir="${dist.dir}/javadoc"
            sourcepath="${src.dir}" >

            <classpath>

                <path refid="classpath" />
            </classpath>
        </javadoc>

        <jar
            jarfile="${javadoc-jar}"
            manifest="MANIFEST.MF" >

            <fileset dir="${dist.dir}/javadoc" />

            <metainf
                dir="${basedir}"
                includes="NOTICE" />

            <metainf
                dir="${basedir}"
                includes="LICENSE" />
        </jar>

        <!-- build the sources jar -->

        <jar
            jarfile="${sources-jar}"
            manifest="MANIFEST.MF" >

            <fileset dir="${src.dir}" />

            <metainf
                dir="${basedir}"
                includes="NOTICE" />

            <metainf
                dir="${basedir}"
                includes="LICENSE" />
        </jar>
    </target>

    <target name="cleanup" >

        <delete>

            <fileset
                dir="."
                includes="**/*.class" />

            <fileset file="MANIFEST.MF" />
        </delete>

        <delete dir="${dist.dir}" />
    </target>

    <target
        name="build"
        depends="jar,cleanup" />

    <target
        name="deploy"
        depends="dist"
        description="deploy snapshot version to Maven snapshot repository" >

        <exec executable="mvn" >

            <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />

            <arg value="-Durl=${ossrh-snapshots-repository-url}" />

            <arg value="-DrepositoryId=${ossrh-server-id}" />

            <arg value="-DpomFile=pom.xml" />

            <arg value="-Dfile=${jar}" />
        </exec>
    </target>

    <!--
         before this, update project version (both build.xml and pom.xml) from 
		SNAPSHOT to RELEASE
    -->

    <target
        name="stage"
        depends="dist"
        description="deploy release version to Maven staging repository" >

        <!-- sign and deploy the main artifact -->

        <exec executable="mvn" >

            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />

            <arg value="-Durl=${ossrh-staging-repository-url}" />

            <arg value="-DrepositoryId=${ossrh-server-id}" />

            <arg value="-DpomFile=pom.xml" />

            <arg value="-Dfile=${jar}" />

            <arg value="-Pgpg" />
        </exec>

        <!-- sign and deploy the sources artifact -->

        <exec executable="mvn" >

            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />

            <arg value="-Durl=${ossrh-staging-repository-url}" />

            <arg value="-DrepositoryId=${ossrh-server-id}" />

            <arg value="-DpomFile=pom.xml" />

            <arg value="-Dfile=${sources-jar}" />

            <arg value="-Dclassifier=sources" />

            <arg value="-Pgpg" />
        </exec>

        <!-- sign and deploy the javadoc artifact -->

        <exec executable="mvn" >

            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />

            <arg value="-Durl=${ossrh-staging-repository-url}" />

            <arg value="-DrepositoryId=${ossrh-server-id}" />

            <arg value="-DpomFile=pom.xml" />

            <arg value="-Dfile=${javadoc-jar}" />

            <arg value="-Dclassifier=javadoc" />

            <arg value="-Pgpg" />
        </exec>
    </target>

</project>